<!--
  ~ Copyright (C) 2022 Food and Agriculture Organization of the
  ~ United Nations (FAO-UN), United Nations World Food Programme (WFP)
  ~ and United Nations Environment Programme (UNEP)
  ~
  ~ This program is free software; you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation; either version 2 of the License, or (at
  ~ your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful, but
  ~ WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  ~ General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program; if not, write to the Free Software
  ~ Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  ~
  ~ Contact: Jeroen Ticheler - FAO - Viale delle Terme di Caracalla 2,
  ~ Rome - Italy. email: geonetwork@osgeo.org
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
          http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context-3.0.xsd
          http://www.springframework.org/schema/util
          http://www.springframework.org/schema/util/spring-util.xsd">

  <context:property-override
    location="WEB-INF/config-security/config-security-openidconnect-overrides.properties"
    ignore-resource-not-found="true"/>


  <!-- Reads from the .json file and creates a ClientRegistration -->
  <bean id="openidconnect_ClientRegistration" class="org.fao.geonet.kernel.security.openidconnect.GeonetworkClientRegistrationProvider">
    <constructor-arg value="${OPENIDCONNECT_SERVERMETADATA_FNAME}"/>
    <constructor-arg value="${OPENIDCONNECT_CLIENTID}"/>
    <constructor-arg value="${OPENIDCONNECT_CLIENTSECRET}"/>
  </bean>



  <!-- Provides a hardcoded  ClientRegistrationRepository with exactly one  ClientRegistration-->
  <bean id="openidconnect_ClientRegistrationRepository" class="org.fao.geonet.kernel.security.openidconnect.GeonetworkClientRegistrationRepository">
    <constructor-arg ref="openidconnect_ClientRegistration"/>
  </bean>

  <bean id="openidconnect_AuthorizationRequestResolver" class="org.fao.geonet.kernel.security.openidconnect.HardcodedRegistrationIdOAuth2AuthorizationRequestResolver">
    <constructor-arg ref="openidconnect_ClientRegistrationRepository"/>
    <constructor-arg value ="/signin" />
  </bean>


  <bean id="opidconnect_SimpleOidcUserFactory" class="org.fao.geonet.kernel.security.openidconnect.SimpleOidcUserFactory"/>

  <bean id="openidconnect_OAuth2AuthorizationRequestRedirectFilter" class="org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter">
    <constructor-arg ref ="openidconnect_AuthorizationRequestResolver" />
   </bean>


  <bean id ="openidconnect_InMemoryOAuth2AuthorizedClientService" class="org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService">
    <constructor-arg ref ="openidconnect_ClientRegistrationRepository" />
  </bean>

  <bean id="openidconnect_OAuth2LoginAuthenticationFilter" class="org.fao.geonet.kernel.security.openidconnect.GeonetworkOAuth2LoginAuthenticationFilter">
    <constructor-arg ref ="openidconnect_ClientRegistrationRepository" />
    <constructor-arg ref ="openidconnect_InMemoryOAuth2AuthorizedClientService" />
    <property name="authenticationManager" ref="openidconnect_ProviderManager"/>
  </bean>

  <bean id ="openidconnect_Configuration" class="org.fao.geonet.kernel.security.openidconnect.OIDCConfiguration">
<!--    <property name="groupPermissionSeparator" value="${openidconnect.groupPermissionSeparator}"/>-->
<!--    <property name="organizationProperty" value="${openidconnect.organizationProperty}"/>-->
<!--    <property name="idTokenRoleLocation" value="${openidconnect.idTokenRoleLocation}"/>-->

<!--    <property name="roleConverter" value="${openidconnect.roleConverter}"/>-->
<!--    <property name="minimumProfile" value="${openidconnect.minimumProfile}"/>-->

<!--    <property name="userProfileUpdateEnabled" value="${openidconnect.userProfileUpdateEnabled}"/>-->
<!--    <property name="userGroupUpdateEnabled" value="${openidconnect.userGroupUpdateEnabled}"/>-->


  </bean>

  <bean id="openidconnect_DefaultAuthorizationCodeTokenResponseClient" class="org.springframework.security.oauth2.client.endpoint.DefaultAuthorizationCodeTokenResponseClient"/>

  <bean id ="openidconnect_OIDCRoleProcessor" class="org.fao.geonet.kernel.security.openidconnect.OIDCRoleProcessor"/>

  <bean id="openidconnect_UserService" class="org.fao.geonet.kernel.security.openidconnect.GeonetworkOidcUserService">
  </bean>



  <bean id="openidconnect_AuthorizationProvider" class="org.springframework.security.oauth2.client.oidc.authentication.OidcAuthorizationCodeAuthenticationProvider">
    <constructor-arg ref="openidconnect_DefaultAuthorizationCodeTokenResponseClient"/>
    <constructor-arg ref="openidconnect_UserService"/>
  </bean>

  <bean id="openidconnect_ProviderManager" class="org.springframework.security.authentication.ProviderManager">
    <constructor-arg>
    <util:list>
      <ref bean="openidconnect_AuthorizationProvider"/>
    </util:list>
    </constructor-arg>
  </bean>

  <bean id="openidconnect_OAuth2SecurityProviderUtil" class="org.fao.geonet.kernel.security.openidconnect.OAuth2SecurityProviderUtil"/>

  <bean id="openidconnect_OidcUser2GeonetworkUser" class="org.fao.geonet.kernel.security.openidconnect.OidcUser2GeonetworkUser"/>

  <bean id="openidconnect_logoutSuccessHandler_base" class="org.springframework.security.oauth2.client.oidc.web.logout.OidcClientInitiatedLogoutSuccessHandler">
    <constructor-arg ref="openidconnect_ClientRegistrationRepository"/>
    <property name="postLogoutRedirectUri" value="REPLACE"/>
  </bean>

  <bean id="openidconnect_logoutSuccessHandler" class="org.fao.geonet.kernel.security.openidconnect.GeonetworkOidcLogoutHandler">
    <constructor-arg ref="openidconnect_logoutSuccessHandler_base"/>
  </bean>

  <bean id="logoutFilter"
        class="org.springframework.security.web.authentication.logout.LogoutFilter">
    <constructor-arg ref="openidconnect_logoutSuccessHandler"/>
    <constructor-arg>
      <list>
        <bean
          class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
        <bean
          class="org.springframework.security.web.authentication.logout.CookieClearingLogoutHandler">
          <constructor-arg>
            <array>
              <value>JSESSIONID</value>
              <value>OAuth_Token_Request_State</value>
              <value>XSRF-TOKEN</value>
            </array>
          </constructor-arg>
        </bean>
      </list>
    </constructor-arg>
    <property name="filterProcessesUrl" value="/signout"/>
  </bean>


  <bean id="filterChainFilters" class="java.util.ArrayList">
    <constructor-arg>
      <list>
        <ref bean="securityContextPersistenceFilter"/>
        <!-- To disable csrf security (not recommended) comment the following line -->
        <ref bean="csrfFilter" />
        <!-- To disable csrf security (not recommended) comment the upper line -->

        <ref bean="openidconnect_OAuth2AuthorizationRequestRedirectFilter"/>
        <ref bean="openidconnect_OAuth2LoginAuthenticationFilter"/>
        <ref bean="logoutFilter"/>

        <ref bean="requestCacheFilter"/>
        <ref bean="anonymousFilter"/>
        <ref bean="sessionMgmtFilter"/>
        <ref bean="exceptionTranslationFilter"/>
        <ref bean="filterSecurityInterceptor"/>
      </list>
    </constructor-arg>
  </bean>

</beans>
